// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                String   @id // Clerk user ID
  email             String   @unique
  firstName         String?  @map("first_name")
  lastName          String?  @map("last_name")
  phone             String?
  profileImageUrl   String?  @map("profile_image_url")
  preferences       Json?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  favorites         UserFavorite[]
  searches          UserSearch[]
  comparisons       PropertyComparison[]

  @@map("users")
}

model Property {
  id            String   @id @default(uuid()) @db.Uuid
  address       String
  city          String
  state         String
  zipCode       String   @map("zip_code")
  latitude      Decimal? @db.Decimal(10, 8)
  longitude     Decimal? @db.Decimal(11, 8)
  
  // Basic Property Info
  price         Decimal  @db.Decimal(12, 2)
  pricePerSqft  Decimal? @map("price_per_sqft") @db.Decimal(8, 2)
  squareFeet    Int?     @map("square_feet")
  lotSize       Decimal? @map("lot_size") @db.Decimal(10, 2)
  bedrooms      Int?
  bathrooms     Decimal? @db.Decimal(3, 1)
  yearBuilt     Int?     @map("year_built")
  propertyType  String?  @map("property_type")
  
  // Property Features
  features      Json?
  description   String?
  
  // Market Data
  daysOnMarket  Int?     @map("days_on_market")
  listingStatus String?  @map("listing_status")
  mlsNumber     String?  @map("mls_number")
  
  // Metadata
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  images        PropertyImage[]
  history       PropertyHistory[]
  favorites     UserFavorite[]
  comparisons   PropertyComparison[]
  schools       PropertySchool[]

  @@map("properties")
}

model PropertyImage {
  id          String   @id @default(uuid()) @db.Uuid
  propertyId  String   @map("property_id") @db.Uuid
  imageUrl    String   @map("image_url")
  imageType   String?  @map("image_type")
  displayOrder Int     @default(0) @map("display_order")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_images")
}

model PropertyHistory {
  id          String   @id @default(uuid()) @db.Uuid
  propertyId  String   @map("property_id") @db.Uuid
  eventType   String   @map("event_type")
  eventDate   DateTime @map("event_date") @db.Date
  oldValue    String?  @map("old_value")
  newValue    String?  @map("new_value")
  details     Json?
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_history")
}

model UserFavorite {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @map("user_id")
  propertyId String   @map("property_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@map("user_favorites")
}

model UserSearch {
  id              String   @id @default(uuid()) @db.Uuid
  userId          String   @map("user_id")
  searchCriteria  Json     @map("search_criteria")
  searchName      String?  @map("search_name")
  isSaved         Boolean  @default(false) @map("is_saved")
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_searches")
}

model PropertyComparison {
  id              String   @id @default(uuid()) @db.Uuid
  userId          String   @map("user_id")
  comparisonName  String?  @map("comparison_name")
  propertyIds     String[] @map("property_ids") @db.Uuid
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  properties      Property[]

  @@map("property_comparisons")
}

model Neighborhood {
  id            String   @id @default(uuid()) @db.Uuid
  name          String
  city          String
  state         String
  zipCode       String?  @map("zip_code")
  
  // Location Intelligence
  walkScore     Int?     @map("walk_score")
  transitScore  Int?     @map("transit_score")
  bikeScore     Int?     @map("bike_score")
  crimeRate     Decimal? @map("crime_rate") @db.Decimal(5, 2)
  
  // Demographics
  medianIncome  Decimal? @map("median_income") @db.Decimal(10, 2)
  population    Int?
  medianAge     Decimal? @map("median_age") @db.Decimal(4, 1)
  
  // Amenities
  amenities     Json?
  
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("neighborhoods")
}

model School {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  schoolType  String   @map("school_type")
  district    String?
  city        String
  state       String
  zipCode     String?  @map("zip_code")
  
  // School Ratings
  rating      Decimal? @db.Decimal(3, 1)
  testScores  Json?    @map("test_scores")
  
  // Location
  latitude    Decimal? @db.Decimal(10, 8)
  longitude   Decimal? @db.Decimal(11, 8)
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  properties  PropertySchool[]

  @@map("schools")
}

model PropertySchool {
  id          String   @id @default(uuid()) @db.Uuid
  propertyId  String   @map("property_id") @db.Uuid
  schoolId    String   @map("school_id") @db.Uuid
  distanceMiles Decimal? @map("distance_miles") @db.Decimal(5, 2)
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  school      School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@unique([propertyId, schoolId])
  @@map("property_schools")
}
